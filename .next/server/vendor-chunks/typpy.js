"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typpy";
exports.ids = ["vendor-chunks/typpy"];
exports.modules = {

/***/ "(rsc)/./node_modules/typpy/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/typpy/lib/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n__webpack_require__(/*! function.name */ \"(rsc)/./node_modules/function.name/lib/index.js\");\n\n/**\n * Typpy\n * Gets the type of the input value or compares it\n * with a provided type.\n *\n * Usage:\n *\n * ```js\n * Typpy({}) // => \"object\"\n * Typpy(42, Number); // => true\n * Typpy.get([], \"array\"); => true\n * ```\n *\n * @name Typpy\n * @function\n * @param {Anything} input The input value.\n * @param {Constructor|String} target The target type.\n * It could be a string (e.g. `\"array\"`) or a\n * constructor (e.g. `Array`).\n * @return {String|Boolean} It returns `true` if the\n * input has the provided type `target` (if was provided),\n * `false` if the input type does *not* have the provided type\n * `target` or the stringified type of the input (always lowercase).\n */\nfunction Typpy(input, target) {\n    if (arguments.length === 2) {\n        return Typpy.is(input, target);\n    }\n    return Typpy.get(input, true);\n}\n\n/**\n * Typpy.is\n * Checks if the input value has a specified type.\n *\n * @name Typpy.is\n * @function\n * @param {Anything} input The input value.\n * @param {Constructor|String} target The target type.\n * It could be a string (e.g. `\"array\"`) or a\n * constructor (e.g. `Array`).\n * @return {Boolean} `true`, if the input has the same\n * type with the target or `false` otherwise.\n */\nTyppy.is = function (input, target) {\n    return Typpy.get(input, typeof target === \"string\") === target;\n};\n\n/**\n * Typpy.get\n * Gets the type of the input value. This is used internally.\n *\n * @name Typpy.get\n * @function\n * @param {Anything} input The input value.\n * @param {Boolean} str A flag to indicate if the return value\n * should be a string or not.\n * @return {Constructor|String} The input value constructor\n * (if any) or the stringified type (always lowercase).\n */\nTyppy.get = function (input, str) {\n\n    if (typeof input === \"string\") {\n        return str ? \"string\" : String;\n    }\n\n    if (null === input) {\n        return str ? \"null\" : null;\n    }\n\n    if (undefined === input) {\n        return str ? \"undefined\" : undefined;\n    }\n\n    if (input !== input) {\n        return str ? \"nan\" : NaN;\n    }\n\n    return str ? input.constructor.name.toLowerCase() : input.constructor;\n};\n\nmodule.exports = Typpy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdHlwcHkvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFPLENBQUMsc0VBQWU7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsc0JBQXNCO0FBQ3RCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsb0JBQW9CO0FBQy9CO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL3R5cHB5L2xpYi9pbmRleC5qcz82ODg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiZnVuY3Rpb24ubmFtZVwiKTtcblxuLyoqXG4gKiBUeXBweVxuICogR2V0cyB0aGUgdHlwZSBvZiB0aGUgaW5wdXQgdmFsdWUgb3IgY29tcGFyZXMgaXRcbiAqIHdpdGggYSBwcm92aWRlZCB0eXBlLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYGpzXG4gKiBUeXBweSh7fSkgLy8gPT4gXCJvYmplY3RcIlxuICogVHlwcHkoNDIsIE51bWJlcik7IC8vID0+IHRydWVcbiAqIFR5cHB5LmdldChbXSwgXCJhcnJheVwiKTsgPT4gdHJ1ZVxuICogYGBgXG4gKlxuICogQG5hbWUgVHlwcHlcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtBbnl0aGluZ30gaW5wdXQgVGhlIGlucHV0IHZhbHVlLlxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcnxTdHJpbmd9IHRhcmdldCBUaGUgdGFyZ2V0IHR5cGUuXG4gKiBJdCBjb3VsZCBiZSBhIHN0cmluZyAoZS5nLiBgXCJhcnJheVwiYCkgb3IgYVxuICogY29uc3RydWN0b3IgKGUuZy4gYEFycmF5YCkuXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn0gSXQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlXG4gKiBpbnB1dCBoYXMgdGhlIHByb3ZpZGVkIHR5cGUgYHRhcmdldGAgKGlmIHdhcyBwcm92aWRlZCksXG4gKiBgZmFsc2VgIGlmIHRoZSBpbnB1dCB0eXBlIGRvZXMgKm5vdCogaGF2ZSB0aGUgcHJvdmlkZWQgdHlwZVxuICogYHRhcmdldGAgb3IgdGhlIHN0cmluZ2lmaWVkIHR5cGUgb2YgdGhlIGlucHV0IChhbHdheXMgbG93ZXJjYXNlKS5cbiAqL1xuZnVuY3Rpb24gVHlwcHkoaW5wdXQsIHRhcmdldCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJldHVybiBUeXBweS5pcyhpbnB1dCwgdGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIFR5cHB5LmdldChpbnB1dCwgdHJ1ZSk7XG59XG5cbi8qKlxuICogVHlwcHkuaXNcbiAqIENoZWNrcyBpZiB0aGUgaW5wdXQgdmFsdWUgaGFzIGEgc3BlY2lmaWVkIHR5cGUuXG4gKlxuICogQG5hbWUgVHlwcHkuaXNcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtBbnl0aGluZ30gaW5wdXQgVGhlIGlucHV0IHZhbHVlLlxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcnxTdHJpbmd9IHRhcmdldCBUaGUgdGFyZ2V0IHR5cGUuXG4gKiBJdCBjb3VsZCBiZSBhIHN0cmluZyAoZS5nLiBgXCJhcnJheVwiYCkgb3IgYVxuICogY29uc3RydWN0b3IgKGUuZy4gYEFycmF5YCkuXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAsIGlmIHRoZSBpbnB1dCBoYXMgdGhlIHNhbWVcbiAqIHR5cGUgd2l0aCB0aGUgdGFyZ2V0IG9yIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5UeXBweS5pcyA9IGZ1bmN0aW9uIChpbnB1dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIFR5cHB5LmdldChpbnB1dCwgdHlwZW9mIHRhcmdldCA9PT0gXCJzdHJpbmdcIikgPT09IHRhcmdldDtcbn07XG5cbi8qKlxuICogVHlwcHkuZ2V0XG4gKiBHZXRzIHRoZSB0eXBlIG9mIHRoZSBpbnB1dCB2YWx1ZS4gVGhpcyBpcyB1c2VkIGludGVybmFsbHkuXG4gKlxuICogQG5hbWUgVHlwcHkuZ2V0XG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7QW55dGhpbmd9IGlucHV0IFRoZSBpbnB1dCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RyIEEgZmxhZyB0byBpbmRpY2F0ZSBpZiB0aGUgcmV0dXJuIHZhbHVlXG4gKiBzaG91bGQgYmUgYSBzdHJpbmcgb3Igbm90LlxuICogQHJldHVybiB7Q29uc3RydWN0b3J8U3RyaW5nfSBUaGUgaW5wdXQgdmFsdWUgY29uc3RydWN0b3JcbiAqIChpZiBhbnkpIG9yIHRoZSBzdHJpbmdpZmllZCB0eXBlIChhbHdheXMgbG93ZXJjYXNlKS5cbiAqL1xuVHlwcHkuZ2V0ID0gZnVuY3Rpb24gKGlucHV0LCBzdHIpIHtcblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHN0ciA/IFwic3RyaW5nXCIgOiBTdHJpbmc7XG4gICAgfVxuXG4gICAgaWYgKG51bGwgPT09IGlucHV0KSB7XG4gICAgICAgIHJldHVybiBzdHIgPyBcIm51bGxcIiA6IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHN0ciA/IFwidW5kZWZpbmVkXCIgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0ICE9PSBpbnB1dCkge1xuICAgICAgICByZXR1cm4gc3RyID8gXCJuYW5cIiA6IE5hTjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyID8gaW5wdXQuY29uc3RydWN0b3IubmFtZS50b0xvd2VyQ2FzZSgpIDogaW5wdXQuY29uc3RydWN0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFR5cHB5OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/typpy/lib/index.js\n");

/***/ })

};
;